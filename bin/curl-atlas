#!/bin/sh

function abort {
    >&2 echo "Aborting '`basename $0`'"
    exit 1
}

cwd=`pwd`
# get project top-level dir (look for 'fabfile.py')
while [ ! -r fabfile.py -a "`pwd`" != "/" ]; do
    cd ..
done
top_dir=`pwd`
cd $cwd

if [ "${top_dir}" = "/" ]; then
    >&2 echo "Error: traversed to '/' while trying to find top-level dir"
    abort
fi

if [ $# -lt 3 ]; then
    echo "usage: `basename $0` <usr_label> <method> [...<`basename $0`-options>] [...<curl-options>] <atlas_uri>"
    echo ""
    echo "A wrapper around curl, to simplify REST calls to Atlas."
    echo "- See 'test_helper.coffee' for the user labels available for use."
    echo "- See 'http://apidocs.cisco.com/apidocs/static/raml/atlas-server.html' for URIs available for use."
    echo ""
    echo "'`basename $0`' options:"
    echo "  '--print-only',  Print the command that would be run instead of actually running it."
    echo "  '--pretty-print-json',  Pretty-print JSON response (error if the response is not JSON-formatted)"
    echo "  '--json-req-mode',  Force 'Content-Type: application/json'"
    echo ""
    echo "'curl-options':"
    echo "  Any valid option that can be passed to 'curl'. See curl(1)."
    echo ""
    echo "ex. GET list of organizations"
    echo "  `basename $0` pbr-admin GET /organizations"
    echo ""
    echo "ex. GET list of organizations (output response header only)"
    echo "  `basename $0` pbr-admin GET -I /organizations"
    echo ""
    echo "ex. POST a JSON payload (filename is './payload.json') to create a new organization"
    echo "  `basename $0` partner-admin POST --data @payload.json /organizations"
    echo ""
    echo "ex. DELETE a user."
    echo "  `basename $0` partner-admin DELETE '/user?email=testuser@example.com'"
    exit 1
fi

usr_label=${1}
method=${2}
atlas_uri=$(eval echo \$$#)  # <- indirect reference to get last positional param

# strip out first, second, and last positional args, the rest are passed through to 'curl'
curl_opts=( $@ )
last_position=$(( $# - 1 ))
unset -v curl_opts[0]
unset -v curl_opts[1]
unset -v curl_opts[$last_position]

# iterate through remaining args, look for special options only meaningful to this script
print_only="false"
pretty_print_json="false"
json_req_mode="false"
i=0
for arg in "${curl_opts[@]}"; do
    case "${arg}" in
        "--print-only" )
            print_only="true"
            unset -v curl_opts[$(( 2 + $i ))]  # <- offset for first two args
            ;;
        "--pretty-print-json" )
            pretty_print_json="true"
            unset -v curl_opts[$(( 2 + $i ))]
            ;;
        "--json-req-mode" )
            json_req_mode="true"
            unset -v curl_opts[$(( 2 + $i ))]
            ;;
        "--data" )
            # if a '--data' arg is present, see if the next arg specifies a *.json filename payload
            next_arg="${curl_opts[$(( 2 + $i + 1 ))]}"
            if [[ "$next_arg" =~ @.*.json$ ]]; then
                json_req_mode="true"
            fi
            ;;

    esac
    let "i += 1"
done

source ${top_dir}/bin/include/curl-api-helpers

# get bearer token
bearer_token="`${top_dir}/bin/curl-get-bearer-token.sh ${usr_label}`"
[ $? -eq 0 ] || abort

# check that the pending operation isn't harmful
is_safe_atlas_operation "${method}" "${atlas_uri}"
[ $? -eq 0 ] || abort

# add an override header to force content-type to json as appropriate
content_type_override=""
if [ "${json_req_mode}" = "true" ]; then
    content_type_override="-H 'Content-Type: application/json'"
fi

# final command to run
cmd="curl --request ${method} \
    -H 'Authorization: Bearer ${bearer_token}' \
    ${content_type_override} \
    ${curl_opts[@]} \
    '${atlas_api_url}${atlas_uri}'"

# echo command only if '--print-only' set
if [ "$print_only" = "true" ]; then
    if [ "$pretty_print_json" = "true" ]; then
        cmd="$cmd | python -m 'json.tool'"
    fi
    echo $cmd
else
    # pipe to pretty-printer if '--pretty-print-json' set
    if [ "$pretty_print_json" = "true" ]; then
        eval "$cmd" | python -m 'json.tool'
    else
        eval "$cmd"
    fi
fi
