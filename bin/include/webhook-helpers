# early out if this file has already been sourced
if type unset_webhook_helpers  >/dev/null 2>&1; then
    return
fi

# reset function (use this when needing to re-source this file)
function unset_webhook_helpers {
    unset unset_webhook_helpers
}

function tr_result_line_to_list_items {
    while read line; do
        test_id=`echo $line | awk -F'|' '{print $1;}' | xargs echo`
        spec_file=`echo $line | awk -F'|' '{print $2;}' | xargs echo`
        if [ -z "$spec_file" ]; then
            spec_file="(N/A)"
        fi
        url=`echo $line | awk -F'|' '{print $3;}' | xargs echo`
        if [ -z "$url" ]; then
            url="(N/A)"
        fi
        echo "-----"
        echo "- test: ${test_id}"
        echo "- spec file: ${spec_file}"
        echo "- see: ${url}"
    done
}

function concat_lines {
    # concat into a single line, and escape double-quotes with sed
    while read line; do
      printf "%s\\\n" "$line"
    done | \
        sed -e 's/"/\\"/g'
}

function tr_notification_to_json_payload {
    sed -E 's/(.*)/{ "text": "\1" }/'
}

function mk_notification_flat_payload {
    echo "Build Failed!"
    echo "- Build: ${BUILD_URL}"

    local report_file=${1}
    if [ -f "${report_file}" ]; then
        summary_line=`cat ${report_file} | grep failed | grep overall:`
        if [ -z "$summary_line" ]; then
            summary_line="(N/A)"
        fi
        echo "E2E Test Summary:"
        echo "- ${summary_line}"
        echo "E2E Test Results:"
        cat ${report_file} | grep failed | grep -v overall: | tr_result_line_to_list_items
    fi
}
